// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cocktaildb.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cocktaildb {

  /// <summary>Holder for reflection information generated from cocktaildb.proto</summary>
  public static partial class CocktaildbReflection {

    #region Descriptor
    /// <summary>File descriptor for cocktaildb.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CocktaildbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBjb2NrdGFpbGRiLnByb3RvEgpjb2NrdGFpbGRiIh8KC1Byb2R1Y3RDb2Rl",
            "EhAKCHVwY19jb2RlGAEgASgJIp8BCgpJbmdyZWRpZW50EgoKAmlkGAEgASgN",
            "EgwKBG5hbWUYAiABKAkSLgoNcHJvZHVjdF9jb2RlcxgDIAMoCzIXLmNvY2t0",
            "YWlsZGIuUHJvZHVjdENvZGUSEQoJcmVjaXBlX2lkGAQgASgNEjQKD2luZ3Jl",
            "ZGllbnRfdHlwZRgFIAEoDjIbLmNvY2t0YWlsZGIuRUluZ3JlZGllbnRUeXBl",
            "InYKBlJlY2lwZRIKCgJJRBgBIAEoDRIMCgRuYW1lGAIgASgJEg8KB2ltZ2Zp",
            "bGUYByABKAkSEwoLaXNfY29ja3RhaWwYBSABKAgSLAoMcmVjaXBlX3N0ZXBz",
            "GAYgAygLMhYuY29ja3RhaWxkYi5SZWNpcGVTdGVwIjUKA1F0eRINCgV2YWx1",
            "ZRgBIAEoAhIfCgR0eXBlGAIgASgOMhEuY29ja3RhaWxkYi5FVW5pdCKEAQoK",
            "UmVjaXBlU3RlcBIXCg1pbmdyZWRpZW50X2lkGAEgASgNSAASHQoTaW5ncmVk",
            "aWVudF9ncm91cF9pZBgCIAEoDUgAEhwKA3F0eRgDIAEoCzIPLmNvY2t0YWls",
            "ZGIuUXR5EhIKCmlzX2dhcm5pc2gYBCABKAhCDAoKaW5ncmVkaWVudCI5Cg5J",
            "bmdyZWRpZW50RmlsZRInCgdlbnRyaWVzGAEgAygLMhYuY29ja3RhaWxkYi5J",
            "bmdyZWRpZW50IjEKClJlY2lwZUZpbGUSIwoHZW50cmllcxgBIAMoCzISLmNv",
            "Y2t0YWlsZGIuUmVjaXBlIjoKC0VxdWl2YWxlbmNlEhYKDmluZ3JlZGllbnRf",
            "aWRzGAEgAygNEhMKC2VxdWl2YWxlbmNlGAIgASgCIj0KDE1ldGFEYXRhRmls",
            "ZRItCgxlcXVpdmFsZW5jZXMYASADKAsyFy5jb2NrdGFpbGRiLkVxdWl2YWxl",
            "bmNlKq0BCg9FSW5ncmVkaWVudFR5cGUSDwoLdW5zcGVjaWZpZWQQABISCg5s",
            "aXF1aWRfYWxjb2hvbBABEhEKDXJlc2VydmVkXzB4MDIQAhIRCg1saXF1aWRf",
            "ZmlsbGVyEAMSBwoDaWNlEAQSCgoGcG93ZGVyEAUSDwoLZW11bHNpZnlpbmcQ",
            "BhIWChJmcnVpdF9vcl92ZWdldGFibGUQBxIRCg1sZWFmX29yX3NwcmlnEAgq",
            "JAoJRUxhbmd1YWdlEgsKB2VuZ2xpc2gQABIKCgZmcmVuY2gQASqAAQoFRVVu",
            "aXQSCAoEbm9uZRAAEgsKB3VuaXRhcnkQARIMCghsaXF1aWRNTBACEgwKCGxp",
            "cXVpZG96EAMSBwoDY3VwEAQSCQoFcGluY2gQBhIMCgh0ZWFzcG9vbhAIEg4K",
            "CnRhYmxlc3Bvb24QCRIICgRkYXNoEAoSCAoEZHJvcBALYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cocktaildb.EIngredientType), typeof(global::Cocktaildb.ELanguage), typeof(global::Cocktaildb.EUnit), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.ProductCode), global::Cocktaildb.ProductCode.Parser, new[]{ "UpcCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.Ingredient), global::Cocktaildb.Ingredient.Parser, new[]{ "Id", "Name", "ProductCodes", "RecipeId", "IngredientType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.Recipe), global::Cocktaildb.Recipe.Parser, new[]{ "ID", "Name", "Imgfile", "IsCocktail", "RecipeSteps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.Qty), global::Cocktaildb.Qty.Parser, new[]{ "Value", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.RecipeStep), global::Cocktaildb.RecipeStep.Parser, new[]{ "IngredientId", "IngredientGroupId", "Qty", "IsGarnish" }, new[]{ "Ingredient" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.IngredientFile), global::Cocktaildb.IngredientFile.Parser, new[]{ "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.RecipeFile), global::Cocktaildb.RecipeFile.Parser, new[]{ "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.Equivalence), global::Cocktaildb.Equivalence.Parser, new[]{ "IngredientIds", "Equivalence_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cocktaildb.MetaDataFile), global::Cocktaildb.MetaDataFile.Parser, new[]{ "Equivalences" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EIngredientType {
    [pbr::OriginalName("unspecified")] Unspecified = 0,
    [pbr::OriginalName("liquid_alcohol")] LiquidAlcohol = 1,
    [pbr::OriginalName("reserved_0x02")] Reserved0X02 = 2,
    [pbr::OriginalName("liquid_filler")] LiquidFiller = 3,
    [pbr::OriginalName("ice")] Ice = 4,
    [pbr::OriginalName("powder")] Powder = 5,
    [pbr::OriginalName("emulsifying")] Emulsifying = 6,
    [pbr::OriginalName("fruit_or_vegetable")] FruitOrVegetable = 7,
    [pbr::OriginalName("leaf_or_sprig")] LeafOrSprig = 8,
  }

  public enum ELanguage {
    [pbr::OriginalName("english")] English = 0,
    [pbr::OriginalName("french")] French = 1,
  }

  public enum EUnit {
    /// <summary>
    /// When unit doesn't apply
    /// </summary>
    [pbr::OriginalName("none")] None = 0,
    [pbr::OriginalName("unitary")] Unitary = 1,
    /// <summary>
    /// Milliliter
    /// </summary>
    [pbr::OriginalName("liquidML")] LiquidMl = 2,
    /// <summary>
    /// Ounce
    /// </summary>
    [pbr::OriginalName("liquidoz")] Liquidoz = 3,
    /// <summary>
    /// Cup
    /// </summary>
    [pbr::OriginalName("cup")] Cup = 4,
    /// <summary>
    /// Fingertip quantity
    /// </summary>
    [pbr::OriginalName("pinch")] Pinch = 6,
    /// <summary>
    /// wheel = 7;		// Basically a slice of a fruit
    /// </summary>
    [pbr::OriginalName("teaspoon")] Teaspoon = 8,
    /// <summary>
    /// 14 ml (1/2 oz)
    /// </summary>
    [pbr::OriginalName("tablespoon")] Tablespoon = 9,
    /// <summary>
    /// 1 ml
    /// </summary>
    [pbr::OriginalName("dash")] Dash = 10,
    /// <summary>
    /// One drop
    /// </summary>
    [pbr::OriginalName("drop")] Drop = 11,
  }

  #endregion

  #region Messages
  public sealed partial class ProductCode : pb::IMessage<ProductCode> {
    private static readonly pb::MessageParser<ProductCode> _parser = new pb::MessageParser<ProductCode>(() => new ProductCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductCode(ProductCode other) : this() {
      upcCode_ = other.upcCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductCode Clone() {
      return new ProductCode(this);
    }

    /// <summary>Field number for the "upc_code" field.</summary>
    public const int UpcCodeFieldNumber = 1;
    private string upcCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpcCode {
      get { return upcCode_; }
      set {
        upcCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpcCode != other.UpcCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpcCode.Length != 0) hash ^= UpcCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpcCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UpcCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpcCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpcCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductCode other) {
      if (other == null) {
        return;
      }
      if (other.UpcCode.Length != 0) {
        UpcCode = other.UpcCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UpcCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ingredient : pb::IMessage<Ingredient> {
    private static readonly pb::MessageParser<Ingredient> _parser = new pb::MessageParser<Ingredient>(() => new Ingredient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ingredient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ingredient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ingredient(Ingredient other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      productCodes_ = other.productCodes_.Clone();
      recipeId_ = other.recipeId_;
      ingredientType_ = other.ingredientType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ingredient Clone() {
      return new Ingredient(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// do not accept 0 as ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "product_codes" field.</summary>
    public const int ProductCodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cocktaildb.ProductCode> _repeated_productCodes_codec
        = pb::FieldCodec.ForMessage(26, global::Cocktaildb.ProductCode.Parser);
    private readonly pbc::RepeatedField<global::Cocktaildb.ProductCode> productCodes_ = new pbc::RepeatedField<global::Cocktaildb.ProductCode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cocktaildb.ProductCode> ProductCodes {
      get { return productCodes_; }
    }

    /// <summary>Field number for the "recipe_id" field.</summary>
    public const int RecipeIdFieldNumber = 4;
    private uint recipeId_;
    /// <summary>
    /// 0 = null
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecipeId {
      get { return recipeId_; }
      set {
        recipeId_ = value;
      }
    }

    /// <summary>Field number for the "ingredient_type" field.</summary>
    public const int IngredientTypeFieldNumber = 5;
    private global::Cocktaildb.EIngredientType ingredientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cocktaildb.EIngredientType IngredientType {
      get { return ingredientType_; }
      set {
        ingredientType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ingredient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ingredient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!productCodes_.Equals(other.productCodes_)) return false;
      if (RecipeId != other.RecipeId) return false;
      if (IngredientType != other.IngredientType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= productCodes_.GetHashCode();
      if (RecipeId != 0) hash ^= RecipeId.GetHashCode();
      if (IngredientType != 0) hash ^= IngredientType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      productCodes_.WriteTo(output, _repeated_productCodes_codec);
      if (RecipeId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(RecipeId);
      }
      if (IngredientType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) IngredientType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += productCodes_.CalculateSize(_repeated_productCodes_codec);
      if (RecipeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecipeId);
      }
      if (IngredientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IngredientType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ingredient other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      productCodes_.Add(other.productCodes_);
      if (other.RecipeId != 0) {
        RecipeId = other.RecipeId;
      }
      if (other.IngredientType != 0) {
        IngredientType = other.IngredientType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            productCodes_.AddEntriesFrom(input, _repeated_productCodes_codec);
            break;
          }
          case 32: {
            RecipeId = input.ReadUInt32();
            break;
          }
          case 40: {
            ingredientType_ = (global::Cocktaildb.EIngredientType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Recipe : pb::IMessage<Recipe> {
    private static readonly pb::MessageParser<Recipe> _parser = new pb::MessageParser<Recipe>(() => new Recipe());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recipe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recipe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recipe(Recipe other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      imgfile_ = other.imgfile_;
      isCocktail_ = other.isCocktail_;
      recipeSteps_ = other.recipeSteps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recipe Clone() {
      return new Recipe(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private uint iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imgfile" field.</summary>
    public const int ImgfileFieldNumber = 7;
    private string imgfile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Imgfile {
      get { return imgfile_; }
      set {
        imgfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_cocktail" field.</summary>
    public const int IsCocktailFieldNumber = 5;
    private bool isCocktail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCocktail {
      get { return isCocktail_; }
      set {
        isCocktail_ = value;
      }
    }

    /// <summary>Field number for the "recipe_steps" field.</summary>
    public const int RecipeStepsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cocktaildb.RecipeStep> _repeated_recipeSteps_codec
        = pb::FieldCodec.ForMessage(50, global::Cocktaildb.RecipeStep.Parser);
    private readonly pbc::RepeatedField<global::Cocktaildb.RecipeStep> recipeSteps_ = new pbc::RepeatedField<global::Cocktaildb.RecipeStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cocktaildb.RecipeStep> RecipeSteps {
      get { return recipeSteps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recipe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recipe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Imgfile != other.Imgfile) return false;
      if (IsCocktail != other.IsCocktail) return false;
      if(!recipeSteps_.Equals(other.recipeSteps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Imgfile.Length != 0) hash ^= Imgfile.GetHashCode();
      if (IsCocktail != false) hash ^= IsCocktail.GetHashCode();
      hash ^= recipeSteps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsCocktail != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCocktail);
      }
      recipeSteps_.WriteTo(output, _repeated_recipeSteps_codec);
      if (Imgfile.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Imgfile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Imgfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Imgfile);
      }
      if (IsCocktail != false) {
        size += 1 + 1;
      }
      size += recipeSteps_.CalculateSize(_repeated_recipeSteps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recipe other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Imgfile.Length != 0) {
        Imgfile = other.Imgfile;
      }
      if (other.IsCocktail != false) {
        IsCocktail = other.IsCocktail;
      }
      recipeSteps_.Add(other.recipeSteps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            IsCocktail = input.ReadBool();
            break;
          }
          case 50: {
            recipeSteps_.AddEntriesFrom(input, _repeated_recipeSteps_codec);
            break;
          }
          case 58: {
            Imgfile = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Qty : pb::IMessage<Qty> {
    private static readonly pb::MessageParser<Qty> _parser = new pb::MessageParser<Qty>(() => new Qty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Qty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Qty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Qty(Qty other) : this() {
      value_ = other.value_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Qty Clone() {
      return new Qty(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cocktaildb.EUnit type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cocktaildb.EUnit Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Qty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Qty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Qty other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
          case 16: {
            type_ = (global::Cocktaildb.EUnit) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecipeStep : pb::IMessage<RecipeStep> {
    private static readonly pb::MessageParser<RecipeStep> _parser = new pb::MessageParser<RecipeStep>(() => new RecipeStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecipeStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecipeStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecipeStep(RecipeStep other) : this() {
      qty_ = other.qty_ != null ? other.qty_.Clone() : null;
      isGarnish_ = other.isGarnish_;
      switch (other.IngredientCase) {
        case IngredientOneofCase.IngredientId:
          IngredientId = other.IngredientId;
          break;
        case IngredientOneofCase.IngredientGroupId:
          IngredientGroupId = other.IngredientGroupId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecipeStep Clone() {
      return new RecipeStep(this);
    }

    /// <summary>Field number for the "ingredient_id" field.</summary>
    public const int IngredientIdFieldNumber = 1;
    /// <summary>
    /// do not accept 0 as ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IngredientId {
      get { return ingredientCase_ == IngredientOneofCase.IngredientId ? (uint) ingredient_ : 0; }
      set {
        ingredient_ = value;
        ingredientCase_ = IngredientOneofCase.IngredientId;
      }
    }

    /// <summary>Field number for the "ingredient_group_id" field.</summary>
    public const int IngredientGroupIdFieldNumber = 2;
    /// <summary>
    /// do not accept 0 as ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IngredientGroupId {
      get { return ingredientCase_ == IngredientOneofCase.IngredientGroupId ? (uint) ingredient_ : 0; }
      set {
        ingredient_ = value;
        ingredientCase_ = IngredientOneofCase.IngredientGroupId;
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 3;
    private global::Cocktaildb.Qty qty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cocktaildb.Qty Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "is_garnish" field.</summary>
    public const int IsGarnishFieldNumber = 4;
    private bool isGarnish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGarnish {
      get { return isGarnish_; }
      set {
        isGarnish_ = value;
      }
    }

    private object ingredient_;
    /// <summary>Enum of possible cases for the "ingredient" oneof.</summary>
    public enum IngredientOneofCase {
      None = 0,
      IngredientId = 1,
      IngredientGroupId = 2,
    }
    private IngredientOneofCase ingredientCase_ = IngredientOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngredientOneofCase IngredientCase {
      get { return ingredientCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIngredient() {
      ingredientCase_ = IngredientOneofCase.None;
      ingredient_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecipeStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecipeStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IngredientId != other.IngredientId) return false;
      if (IngredientGroupId != other.IngredientGroupId) return false;
      if (!object.Equals(Qty, other.Qty)) return false;
      if (IsGarnish != other.IsGarnish) return false;
      if (IngredientCase != other.IngredientCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ingredientCase_ == IngredientOneofCase.IngredientId) hash ^= IngredientId.GetHashCode();
      if (ingredientCase_ == IngredientOneofCase.IngredientGroupId) hash ^= IngredientGroupId.GetHashCode();
      if (qty_ != null) hash ^= Qty.GetHashCode();
      if (IsGarnish != false) hash ^= IsGarnish.GetHashCode();
      hash ^= (int) ingredientCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ingredientCase_ == IngredientOneofCase.IngredientId) {
        output.WriteRawTag(8);
        output.WriteUInt32(IngredientId);
      }
      if (ingredientCase_ == IngredientOneofCase.IngredientGroupId) {
        output.WriteRawTag(16);
        output.WriteUInt32(IngredientGroupId);
      }
      if (qty_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Qty);
      }
      if (IsGarnish != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsGarnish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ingredientCase_ == IngredientOneofCase.IngredientId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IngredientId);
      }
      if (ingredientCase_ == IngredientOneofCase.IngredientGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IngredientGroupId);
      }
      if (qty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qty);
      }
      if (IsGarnish != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecipeStep other) {
      if (other == null) {
        return;
      }
      if (other.qty_ != null) {
        if (qty_ == null) {
          qty_ = new global::Cocktaildb.Qty();
        }
        Qty.MergeFrom(other.Qty);
      }
      if (other.IsGarnish != false) {
        IsGarnish = other.IsGarnish;
      }
      switch (other.IngredientCase) {
        case IngredientOneofCase.IngredientId:
          IngredientId = other.IngredientId;
          break;
        case IngredientOneofCase.IngredientGroupId:
          IngredientGroupId = other.IngredientGroupId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IngredientId = input.ReadUInt32();
            break;
          }
          case 16: {
            IngredientGroupId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (qty_ == null) {
              qty_ = new global::Cocktaildb.Qty();
            }
            input.ReadMessage(qty_);
            break;
          }
          case 32: {
            IsGarnish = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IngredientFile : pb::IMessage<IngredientFile> {
    private static readonly pb::MessageParser<IngredientFile> _parser = new pb::MessageParser<IngredientFile>(() => new IngredientFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IngredientFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngredientFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngredientFile(IngredientFile other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IngredientFile Clone() {
      return new IngredientFile(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cocktaildb.Ingredient> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Cocktaildb.Ingredient.Parser);
    private readonly pbc::RepeatedField<global::Cocktaildb.Ingredient> entries_ = new pbc::RepeatedField<global::Cocktaildb.Ingredient>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cocktaildb.Ingredient> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IngredientFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IngredientFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IngredientFile other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecipeFile : pb::IMessage<RecipeFile> {
    private static readonly pb::MessageParser<RecipeFile> _parser = new pb::MessageParser<RecipeFile>(() => new RecipeFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecipeFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecipeFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecipeFile(RecipeFile other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecipeFile Clone() {
      return new RecipeFile(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cocktaildb.Recipe> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Cocktaildb.Recipe.Parser);
    private readonly pbc::RepeatedField<global::Cocktaildb.Recipe> entries_ = new pbc::RepeatedField<global::Cocktaildb.Recipe>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cocktaildb.Recipe> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecipeFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecipeFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecipeFile other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Equivalence : pb::IMessage<Equivalence> {
    private static readonly pb::MessageParser<Equivalence> _parser = new pb::MessageParser<Equivalence>(() => new Equivalence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Equivalence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equivalence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equivalence(Equivalence other) : this() {
      ingredientIds_ = other.ingredientIds_.Clone();
      equivalence_ = other.equivalence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equivalence Clone() {
      return new Equivalence(this);
    }

    /// <summary>Field number for the "ingredient_ids" field.</summary>
    public const int IngredientIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_ingredientIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> ingredientIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> IngredientIds {
      get { return ingredientIds_; }
    }

    /// <summary>Field number for the "equivalence" field.</summary>
    public const int Equivalence_FieldNumber = 2;
    private float equivalence_;
    /// <summary>
    /// 0 = not so much, 1 = perfectly switchable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Equivalence_ {
      get { return equivalence_; }
      set {
        equivalence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Equivalence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Equivalence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ingredientIds_.Equals(other.ingredientIds_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Equivalence_, other.Equivalence_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ingredientIds_.GetHashCode();
      if (Equivalence_ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Equivalence_);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ingredientIds_.WriteTo(output, _repeated_ingredientIds_codec);
      if (Equivalence_ != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Equivalence_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ingredientIds_.CalculateSize(_repeated_ingredientIds_codec);
      if (Equivalence_ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Equivalence other) {
      if (other == null) {
        return;
      }
      ingredientIds_.Add(other.ingredientIds_);
      if (other.Equivalence_ != 0F) {
        Equivalence_ = other.Equivalence_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ingredientIds_.AddEntriesFrom(input, _repeated_ingredientIds_codec);
            break;
          }
          case 21: {
            Equivalence_ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MetaDataFile : pb::IMessage<MetaDataFile> {
    private static readonly pb::MessageParser<MetaDataFile> _parser = new pb::MessageParser<MetaDataFile>(() => new MetaDataFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetaDataFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cocktaildb.CocktaildbReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaDataFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaDataFile(MetaDataFile other) : this() {
      equivalences_ = other.equivalences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaDataFile Clone() {
      return new MetaDataFile(this);
    }

    /// <summary>Field number for the "equivalences" field.</summary>
    public const int EquivalencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cocktaildb.Equivalence> _repeated_equivalences_codec
        = pb::FieldCodec.ForMessage(10, global::Cocktaildb.Equivalence.Parser);
    private readonly pbc::RepeatedField<global::Cocktaildb.Equivalence> equivalences_ = new pbc::RepeatedField<global::Cocktaildb.Equivalence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cocktaildb.Equivalence> Equivalences {
      get { return equivalences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetaDataFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetaDataFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equivalences_.Equals(other.equivalences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equivalences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equivalences_.WriteTo(output, _repeated_equivalences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equivalences_.CalculateSize(_repeated_equivalences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetaDataFile other) {
      if (other == null) {
        return;
      }
      equivalences_.Add(other.equivalences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            equivalences_.AddEntriesFrom(input, _repeated_equivalences_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
